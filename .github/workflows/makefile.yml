name: Auto Kernel Builder

on:
  push:
    branches: [main, ksu]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [main, ksu]
      fail-fast: false
    timeout-minutes: 45
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 20G
      ARCH: arm64
      SUBARCH: arm

    steps:
    - name: Checkout branch
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Install dependencies & toolchain
      run: |
        sudo apt update
        sudo apt install -y build-essential clang lld libssl-dev libelf-dev flex bison bc ccache curl git git-lfs gnupg gperf imagemagick liblz4-tool libncurses6 libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev gcc-aarch64-linux-gnu

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Configure ccache
      run: |
        mkdir -p $CCACHE_DIR
        echo "max_size = $CCACHE_MAXSIZE"
        sudo chmod -R 777 $CCACHE_DIR

    - name: Restore ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ matrix.branch }}

    - name: Initialize KernelSU (only for ksu branch)
      if: ${{ matrix.branch == 'ksu' }}
      run: |
        git submodule init
        git submodule update

    - name: Build kernel
      run: |
        make -j$(nproc) O=out \
          CC="ccache clang" \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          LLVM_IAS=1 \
          KCFLAGS="--target=aarch64-linux-gnu -Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label" \
          evergo_defconfig

        make -j$(nproc) O=out \
          CC="ccache clang" \
          LD=ld.lld \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=aarch64-linux-gnueabi- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          LLVM_IAS=1 \
          KCFLAGS="--target=aarch64-linux-gnu -Wno-unused-but-set-variable -Wno-implicit-function-declaration -Wno-unused-variable -Wno-unused-function -Wno-unused-label"

    - name: Package kernel with AnyKernel3
      run: |
        git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
        cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/

        # 修复 anykernel.sh 内容
        sed -i 's/^device\.name1=.*/device.name1=evergo/' AnyKernel3/anykernel.sh
        sed -i 's/^device\.name[2-5]=.*/device.name2=\ndevice.name3=\ndevice.name4=\ndevice.name5=/' AnyKernel3/anykernel.sh
        sed -i 's|^BLOCK=.*omap.*|BLOCK=boot;|' AnyKernel3/anykernel.sh

        zip -r9 AnyKernel3-${{ matrix.branch }}.zip AnyKernel3/*

    - name: Upload release to GitHub
      uses: softprops/action-gh-release@v1
      with:
        tag_name: kernel-release-${{ github.run_id }}
        name: Kernel Build - ${{ github.run_id }}
        body: |
          构建分支：${{ matrix.branch }}
          上传者：${{ github.actor }}
          构建时间：${{ github.event.head_commit.timestamp }}
        files: AnyKernel3-${{ matrix.branch }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Save ccache
      uses: actions/cache/save@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ matrix.branch }}-${{ github.run_id }}

    - name: Show ccache stats
      run: ccache -s

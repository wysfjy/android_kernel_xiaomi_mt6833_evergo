name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: ~/.ccache
      CCACHE_MAXSIZE: 20G
    steps:
    - uses: actions/checkout@v4

    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" config.env | head -n 1 | cut -d "=" -f 2)
        CONFIG_LIST=(KERNEL_SOURCE KERNEL_SOURCE_BRANCH KERNEL_CONFIG KERNEL_IMAGE_NAME ARCH ADD_LOCALVERSION_TO_FILENAME EXTRA_CMDS USE_CUSTOM_CLANG CUSTOM_CLANG_SOURCE CUSTOM_CLANG_BRANCH CUSTOM_CMDS CLANG_BRANCH CLANG_VERSION ENABLE_GCC_ARM64 ENABLE_GCC_ARM32 USE_CUSTOM_GCC_64 CUSTOM_GCC_64_SOURCE CUSTOM_GCC_64_BRANCH CUSTOM_GCC_64_BIN USE_CUSTOM_GCC_32 CUSTOM_GCC_32_SOURCE CUSTOM_GCC_32_BRANCH CUSTOM_GCC_32_BIN ENABLE_KERNELSU KERNELSU_TAG ADD_KPROBES_CONFIG DISABLE-LTO ADD_OVERLAYFS_CONFIG DISABLE_CC_WERROR APPLY_KSU_PATCH USE_CUSTOM_ANYKERNEL3 CUSTOM_ANYKERNEL3_SOURCE CUSTOM_ANYKERNEL3_BRANCH ENABLE_CCACHE NEED_DTBO BUILD_BOOT_IMG SOURCE_BOOT_IMAGE KSU_EXPECTED_SIZE KSU_EXPECTED_HASH REMOVE_UNUSED_PACKAGES)
        for CONFIG in "${CONFIG_LIST[@]}"; do
            if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            else
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            fi
        done

    - name: Restore ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ github.ref_name }}
        restore-keys: |
          kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-
          kernel-ccache-${{ runner.os }}-

    # ... （中间步骤略，保持原有逻辑）

    - name: Fix device name in anykernel.sh
      if: env.CHECK_FILE_IS_OK == 'true'
      run: |
        sed -i 's/device.name1=.*/device.name1=evergo/' kernel_workspace/AnyKernel3/anykernel.sh
        sed -i 's/device.name2=.*/device.name2=/' kernel_workspace/AnyKernel3/anykernel.sh
        sed -i 's/device.name3=.*/device.name3=/' kernel_workspace/AnyKernel3/anykernel.sh
        sed -i 's/device.name4=.*/device.name4=/' kernel_workspace/AnyKernel3/anykernel.sh
        sed -i 's/device.name5=.*/device.name5=/' kernel_workspace/AnyKernel3/anykernel.sh

    - name: Create flashable ZIP
      if: env.CHECK_FILE_IS_OK == 'true'
      run: |
        cd kernel_workspace
        zip -r9 AnyKernel3-${{ github.ref_name }}.zip AnyKernel3/*

    - name: Upload to unified GitHub Release
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest-evergo
        name: Evergo Kernel - Latest
        body: |
          自动构建刷机包（分支：${{ github.ref_name }}，上传者：${{ github.actor }}）

          构建时间：${{ env.BUILD_TIME }}
          配置文件：${{ env.KERNEL_CONFIG }}
        files: kernel_workspace/AnyKernel3-${{ github.ref_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Save ccache
      uses: actions/cache/save@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: kernel-ccache-${{ runner.os }}-${{ env.ARCH }}-${{ github.ref_name }}

    - name: Show ccache stats
      if: env.ENABLE_CCACHE == 'true'
      run: |
        ccache -s
